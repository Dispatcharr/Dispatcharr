# Generated by Django 5.2.4 on 2025-10-11 15:54

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('vod', '0002_add_last_seen_with_default'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(editable=False, max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
                ('library_type', models.CharField(choices=[('movies', 'Movies'), ('shows', 'TV Shows'), ('mixed', 'Mixed'), ('other', 'Other')], default='mixed', max_length=16)),
                ('auto_scan_enabled', models.BooleanField(default=True)),
                ('scan_interval_minutes', models.PositiveIntegerField(default=1440, help_text='How often to auto-scan library paths when auto-scan is enabled.')),
                ('metadata_language', models.CharField(default='en', help_text='Primary language for metadata lookups (ISO-639-1).', max_length=8)),
                ('metadata_country', models.CharField(default='US', help_text='Primary country/region for metadata lookups (ISO-3166-1 alpha-2).', max_length=8)),
                ('use_as_vod_source', models.BooleanField(default=False, help_text='When enabled, media matched in this library syncs into the VOD catalog.')),
                ('metadata_options', models.JSONField(blank=True, help_text='Structured configuration for metadata providers and overrides.', null=True)),
                ('last_scan_at', models.DateTimeField(blank=True, null=True)),
                ('last_successful_scan_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LibraryLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=4096)),
                ('include_subdirectories', models.BooleanField(default=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Primary location is used for generating relative paths when multiple roots share structure.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='media_library.library')),
            ],
            options={
                'ordering': ['library__name', 'path'],
                'unique_together': {('library', 'path')},
            },
        ),
        migrations.CreateModel(
            name='LibraryScan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=16)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('total_files', models.PositiveIntegerField(default=0)),
                ('processed_files', models.PositiveIntegerField(default=0)),
                ('new_files', models.PositiveIntegerField(default=0)),
                ('updated_files', models.PositiveIntegerField(default=0)),
                ('removed_files', models.PositiveIntegerField(default=0)),
                ('matched_items', models.PositiveIntegerField(default=0)),
                ('unmatched_files', models.PositiveIntegerField(default=0)),
                ('task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('summary', models.TextField(blank=True)),
                ('log', models.TextField(blank=True)),
                ('extra', models.JSONField(blank=True, null=True)),
                ('discovery_status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('skipped', 'Skipped')], default='pending', max_length=16)),
                ('discovery_total', models.PositiveIntegerField(default=0)),
                ('discovery_processed', models.PositiveIntegerField(default=0)),
                ('metadata_status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('skipped', 'Skipped')], default='pending', max_length=16)),
                ('metadata_total', models.PositiveIntegerField(default=0)),
                ('metadata_processed', models.PositiveIntegerField(default=0)),
                ('artwork_status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('skipped', 'Skipped')], default='pending', max_length=16)),
                ('artwork_total', models.PositiveIntegerField(default=0)),
                ('artwork_processed', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='library_scans', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scans', to='media_library.library')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MediaItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('collection', 'Collection'), ('show', 'Series'), ('season', 'Season'), ('episode', 'Episode'), ('movie', 'Movie'), ('other', 'Other')], default='other', max_length=16)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('matched', 'Matched'), ('failed', 'Failed')], default='pending', max_length=16)),
                ('title', models.CharField(max_length=512)),
                ('sort_title', models.CharField(blank=True, max_length=512)),
                ('normalized_title', models.CharField(blank=True, db_index=True, max_length=512)),
                ('release_year', models.IntegerField(blank=True, null=True)),
                ('season_number', models.IntegerField(blank=True, null=True)),
                ('episode_number', models.IntegerField(blank=True, null=True)),
                ('runtime_ms', models.BigIntegerField(blank=True, null=True)),
                ('synopsis', models.TextField(blank=True)),
                ('tagline', models.CharField(blank=True, max_length=512)),
                ('rating', models.CharField(blank=True, max_length=32)),
                ('genres', models.JSONField(blank=True, null=True)),
                ('studios', models.JSONField(blank=True, null=True)),
                ('cast', models.JSONField(blank=True, null=True)),
                ('crew', models.JSONField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, null=True)),
                ('poster_url', models.URLField(blank=True)),
                ('backdrop_url', models.URLField(blank=True)),
                ('tmdb_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('imdb_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('tvdb_id', models.CharField(blank=True, db_index=True, max_length=64, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('metadata_last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('metadata_source', models.CharField(blank=True, max_length=64)),
                ('first_imported_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='media_library.library')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='media_library.mediaitem')),
                ('vod_episode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='library_items', to='vod.episode')),
                ('vod_movie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='library_items', to='vod.movie')),
                ('vod_series', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='library_items', to='vod.series')),
            ],
            options={
                'ordering': ['library__name', 'item_type', 'sort_title', 'title'],
            },
        ),
        migrations.CreateModel(
            name='MediaFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('absolute_path', models.CharField(max_length=4096)),
                ('relative_path', models.CharField(blank=True, max_length=4096)),
                ('file_name', models.CharField(max_length=1024)),
                ('size_bytes', models.BigIntegerField(default=0)),
                ('duration_ms', models.BigIntegerField(blank=True, null=True)),
                ('video_codec', models.CharField(blank=True, max_length=128)),
                ('audio_codec', models.CharField(blank=True, max_length=128)),
                ('audio_channels', models.FloatField(blank=True, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('frame_rate', models.FloatField(blank=True, null=True)),
                ('bit_rate', models.BigIntegerField(blank=True, null=True)),
                ('container', models.CharField(blank=True, max_length=64)),
                ('has_subtitles', models.BooleanField(default=False)),
                ('subtitle_languages', models.JSONField(blank=True, null=True)),
                ('extra_streams', models.JSONField(blank=True, null=True)),
                ('checksum', models.CharField(blank=True, db_index=True, max_length=64)),
                ('fingerprint', models.CharField(blank=True, db_index=True, max_length=64)),
                ('last_modified_at', models.DateTimeField(blank=True, null=True)),
                ('requires_transcode', models.BooleanField(default=False)),
                ('transcode_status', models.CharField(choices=[('not_required', 'Not Required'), ('pending', 'Pending'), ('processing', 'Processing'), ('ready', 'Ready'), ('failed', 'Failed')], default='not_required', max_length=20)),
                ('transcoded_path', models.CharField(blank=True, max_length=4096)),
                ('transcoded_mime_type', models.CharField(blank=True, max_length=128)),
                ('transcode_error', models.TextField(blank=True)),
                ('transcoded_at', models.DateTimeField(blank=True, null=True)),
                ('last_seen_at', models.DateTimeField(blank=True, null=True)),
                ('missing_since', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='media_library.library')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='media_library.librarylocation')),
                ('media_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='media_library.mediaitem')),
            ],
            options={
                'ordering': ['library', 'relative_path'],
            },
        ),
        migrations.CreateModel(
            name='ArtworkAsset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('asset_type', models.CharField(choices=[('poster', 'Poster'), ('backdrop', 'Backdrop'), ('banner', 'Banner'), ('thumb', 'Thumbnail')], max_length=16)),
                ('external_url', models.URLField(blank=True)),
                ('local_path', models.CharField(blank=True, max_length=4096)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('language', models.CharField(blank=True, max_length=16)),
                ('source', models.CharField(blank=True, max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='artwork', to='media_library.mediaitem')),
            ],
            options={
                'ordering': ['media_item', 'asset_type'],
            },
        ),
        migrations.CreateModel(
            name='WatchProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_ms', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_ms', models.BigIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('completed', models.BooleanField(default=False)),
                ('last_watched_at', models.DateTimeField(auto_now=True)),
                ('media_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_progress', to='media_library.mediaitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_watched_at'],
            },
        ),
        migrations.AddIndex(
            model_name='mediaitem',
            index=models.Index(fields=['library', 'item_type', 'normalized_title'], name='media_libra_library_0676e6_idx'),
        ),
        migrations.AddIndex(
            model_name='mediaitem',
            index=models.Index(fields=['library', 'item_type', 'release_year'], name='media_libra_library_cf3bef_idx'),
        ),
        migrations.AddIndex(
            model_name='mediafile',
            index=models.Index(fields=['library', 'relative_path'], name='media_libra_library_aacdfb_idx'),
        ),
        migrations.AddIndex(
            model_name='mediafile',
            index=models.Index(fields=['media_item', 'last_seen_at'], name='media_libra_media_i_6f32ca_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mediafile',
            unique_together={('library', 'absolute_path')},
        ),
        migrations.AlterUniqueTogether(
            name='artworkasset',
            unique_together={('media_item', 'asset_type', 'language', 'source')},
        ),
        migrations.AlterUniqueTogether(
            name='watchprogress',
            unique_together={('user', 'media_item')},
        ),
    ]
